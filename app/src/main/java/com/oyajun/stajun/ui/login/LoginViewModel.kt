package com.oyajun.stajun.ui.login

import android.app.Application
import android.content.Context
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.oyajun.stajun.BuildConfig
import com.oyajun.stajun.model.LoginData
import com.oyajun.stajun.model.LoginState
import com.oyajun.stajun.network.HttpClientProvider
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.statement.HttpResponse
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.http.isSuccess
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class LoginViewModel(application: Application) : AndroidViewModel(application) {
    private val client = HttpClientProvider.getClient(getApplication())

    private val _loginData = MutableStateFlow(LoginData())
    val loginData: StateFlow<LoginData> = _loginData.asStateFlow()

    fun updateEmail(email: String) {
        _loginData.value = _loginData.value.copy(
            email = email,
            emailValid = android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches(),
            loginState = LoginState.EMAIL_IDLE // „Ç®„É©„ÉºÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
        )
    }

    fun updateOtp(otp: String) {
        _loginData.value = _loginData.value.copy(
            otp = otp,
            loginState = if (_loginData.value.loginState == LoginState.OTP_ERROR) LoginState.OTP_IDLE else _loginData.value.loginState // „Ç®„É©„ÉºÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
        )
    }

    fun submitEmail() {
        viewModelScope.launch {
            _loginData.value = _loginData.value.copy(loginState = LoginState.EMAIL_LOADING)
            _loginData.value = _loginData.value.copy(otp = "")
            try {
                Log.d("LoginViewModel", "Êé•Á∂öË©¶Ë°åÂÖà: ${BuildConfig.API_BASE_URL}")
                val response: HttpResponse = client.post(
                    BuildConfig.API_BASE_URL + "/api/auth/email-otp/send-verification-otp"
                ) {
                    contentType(ContentType.Application.Json)
                    setBody("""{"email":"${_loginData.value.email}","type":"sign-in"}""")
                }
                // cookies from Set-Cookie headers are now stored automatically
                Log.d("LoginViewModel", "OTP „É™„ÇØ„Ç®„Çπ„ÉàÊàêÂäü: ${response.status}")
                if (response.status.isSuccess()) {
                    _loginData.value = _loginData.value.copy(loginState = LoginState.EMAIL_SUCCESS)
                } else {
                    _loginData.value = _loginData.value.copy(loginState = LoginState.EMAIL_ERROR)
                }
            } catch (e: Exception) {
                // logcat
                Log.e("LoginViewModel", "üì´Error sending email OTP", e)
                println("Error sending email OTP: ${e.message}")
                _loginData.value = _loginData.value.copy(loginState = LoginState.EMAIL_ERROR)
            }
        }
    }

    fun submitOtp() {
        viewModelScope.launch {
            _loginData.value = _loginData.value.copy(loginState = LoginState.OTP_LOADING)
            try {
                Log.d("LoginViewModel", "Êé•Á∂öË©¶Ë°åÂÖà: ${BuildConfig.API_BASE_URL}")
                val response: HttpResponse = client.post(
                    BuildConfig.API_BASE_URL + "/api/auth/sign-in/email-otp"
                ) {
                    contentType(ContentType.Application.Json)
                    setBody("""{"email":"${_loginData.value.email}","otp":"${_loginData.value.otp}"}""")
                }
                Log.d("LoginViewModel", "OTP „É™„ÇØ„Ç®„Çπ„ÉàÊàêÂäü: ${response.status}")

                // „É¨„Çπ„Éù„É≥„Çπ„Éò„ÉÉ„ÉÄ„Éº„ÇíÁ¢∫Ë™ç
                response.headers.forEach { name, values ->
                    Log.d("LoginViewModel", "Response header: $name = ${values.joinToString(", ")}")
                }

                if (response.status.isSuccess()) {
                    // cookie„ÅåÊ≠£„Åó„ÅèÔøΩÔøΩÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                    val prefs = getApplication<Application>().getSharedPreferences("cookies", Context.MODE_PRIVATE)
                    val cookieSet = prefs.getStringSet("cookies", emptySet()) ?: emptySet()
                    Log.d("LoginViewModel", "„É≠„Ç∞„Ç§„É≥ÊàêÂäüÂæå„ÅÆcookieÊï∞: ${cookieSet.size}")
                    cookieSet.forEach { cookie ->
                        Log.d("LoginViewModel", "‰øùÂ≠ò„Åï„Çå„ÅüCookie: $cookie")
                    }

                    _loginData.value = _loginData.value.copy(loginState = LoginState.OTP_SUCCESS)
                } else {
                    _loginData.value = _loginData.value.copy(loginState = LoginState.OTP_ERROR)
                }
            } catch (e: Exception) {
                Log.e("LoginViewModel", "üì´Error sending email OTP", e)
                println("Error sending email OTP: ${e.message}")
                _loginData.value = _loginData.value.copy(loginState = LoginState.OTP_ERROR)
            }
        }
    }

    // „Ç®„É©„ÉºÁä∂ÊÖã„ÇíÊâãÂãï„Åß„É™„Çª„ÉÉ„Éà„Åô„ÇãÈñ¢Êï∞„ÇíËøΩÂä†
    fun resetErrorState() {
        when (_loginData.value.loginState) {
            LoginState.EMAIL_ERROR -> _loginData.value = _loginData.value.copy(loginState = LoginState.EMAIL_IDLE)
            LoginState.OTP_ERROR -> _loginData.value = _loginData.value.copy(loginState = LoginState.OTP_IDLE)
            else -> {}
        }
    }

    // ‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã„ÇØ„ÉÉ„Ç≠„Éº„Çí„ÇØ„É™„Ç¢„Åô„ÇãÊ©üËÉΩ„ÇíËøΩÂä†
    fun clearCookies() {
        val prefs = getApplication<Application>().getSharedPreferences("cookies", Context.MODE_PRIVATE)
        prefs.edit().clear().apply()
        Log.d("LoginViewModel", "All cookies cleared")
    }
}
